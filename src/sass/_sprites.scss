/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$doc-name: 'doc';
$doc-x: 91px;
$doc-y: 38px;
$doc-offset-x: -91px;
$doc-offset-y: -38px;
$doc-width: 36px;
$doc-height: 48px;
$doc-total-width: 200px;
$doc-total-height: 91px;
$doc-image: '../images/sprite.png';
$doc: (91px, 38px, -91px, -38px, 36px, 48px, 200px, 91px, '../images/sprite.png', 'doc', );
$logotype-name: 'logotype';
$logotype-x: 91px;
$logotype-y: 0px;
$logotype-offset-x: -91px;
$logotype-offset-y: 0px;
$logotype-width: 109px;
$logotype-height: 38px;
$logotype-total-width: 200px;
$logotype-total-height: 91px;
$logotype-image: '../images/sprite.png';
$logotype: (91px, 0px, -91px, 0px, 109px, 38px, 200px, 91px, '../images/sprite.png', 'logotype', );
$mark-name: 'mark';
$mark-x: 0px;
$mark-y: 0px;
$mark-offset-x: 0px;
$mark-offset-y: 0px;
$mark-width: 91px;
$mark-height: 91px;
$mark-total-width: 200px;
$mark-total-height: 91px;
$mark-image: '../images/sprite.png';
$mark: (0px, 0px, 0px, 0px, 91px, 91px, 200px, 91px, '../images/sprite.png', 'mark', );
$pdf-name: 'pdf';
$pdf-x: 127px;
$pdf-y: 38px;
$pdf-offset-x: -127px;
$pdf-offset-y: -38px;
$pdf-width: 36px;
$pdf-height: 48px;
$pdf-total-width: 200px;
$pdf-total-height: 91px;
$pdf-image: '../images/sprite.png';
$pdf: (127px, 38px, -127px, -38px, 36px, 48px, 200px, 91px, '../images/sprite.png', 'pdf', );
$spritesheet-width: 200px;
$spritesheet-height: 91px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($doc, $logotype, $mark, $pdf, );
$spritesheet: (200px, 91px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
